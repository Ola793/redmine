name: Playwright Tests

permissions:
  contents: write

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      # Set up Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Download Allure History Artifact
        if: always()  # This ensures the step runs regardless of previous step outcomes
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: allure-results/history
          merge-multiple: false
        continue-on-error: true  # This is outside the `with` block
      
      # Step 6: Run Playwright tests
      - name: Run Playwright tests
        run: npm test
        env:
          LOGIN: ${{ secrets.LOGIN }}
          PASSWORD: ${{ secrets.PASSWORD }}
          EMAIL: ${{ secrets.EMAIL }}
        continue-on-error: true

      # Step 7: Generate Allure report (if tests have been executed)
      - name: Generate Allure Report
        run: |
          echo "Generating Allure report..."
          if [ -d allure-results ]; then
            /opt/allure/bin/allure generate allure-results --clean -o allure-report
          else
            echo "Cannot generate report, allure-results not found."
        shell: bash
    
      # Step 8: Upload Allure Report as artifact
      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # Step 9: Upload Allure History (for trend tracking)
      - name: Upload Allure History Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-results/history
          if-no-files-found: warn

      # Step 10: Checkout gh-pages branch for report deployment
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      # Step 11: Restore Allure report from the artifact
      - name: Download Allure Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      # Step 12: Copy Allure Report to the gh-pages directory
      - name: Copy Allure Report to gh-pages
        run: |
          if [ -d allure-report ]; then
            mkdir -p ./allure-report/
            cp -r allure-report/* ./allure-report/ || echo "No allure report generated to copy."
          else
            echo "No allure-report directory found to copy."
        shell: /usr/bin/bash -e {0}

      # Step 13: List contents of allure-report before git commit
      - name: Debug List Allure Report Before Commit
        run: |
          echo "Listing contents of allure-report before commit:"
          ls -la allure-report || echo "allure-report directory does not exist."
        shell: /usr/bin/bash -e {0}

      # Step 14: Commit and push the report to gh-pages branch
      - name: Commit and Push Allure Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -d allure-report ]; then
            git config --local user.name "github-actions[bot]"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git add allure-report/
            git commit -m "Update Allure report" || echo "No changes to commit"
            git push origin gh-pages
          else
            echo "No allure-report directory to commit."
        shell: /usr/bin/bash -e {0}

      # Step 15: Confirm GitHub Pages Setup
      - name: Confirm GitHub Pages Setup
        run: echo "GitHub Pages is set up on the 'gh-pages' branch."
